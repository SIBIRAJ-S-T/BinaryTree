class Node:
    """Class to create a Node for Binary Tree"""
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

class BinaryTree:
    """Binary Tree with essential functions"""
    
    def __init__(self):
        self.root = None

    def insert(self, data):
        """Insert a node in the tree using Level Order"""
        new_node = Node(data)
        if not self.root:
            self.root = new_node
            return
        
        queue = [self.root]
        while queue:
            temp = queue.pop(0)
            if not temp.left:
                temp.left = new_node
                return
            else:
                queue.append(temp.left)

            if not temp.right:
                temp.right = new_node
                return
            else:
                queue.append(temp.right)

    def search(self, key):
        """Search for a node with given key"""
        if not self.root:
            return False
        
        queue = [self.root]
        while queue:
            temp = queue.pop(0)
            if temp.data == key:
                return True
            if temp.left:
                queue.append(temp.left)
            if temp.right:
                queue.append(temp.right)
        return False

    def delete(self, key):
        """Delete a node from the tree"""
        if not self.root:
            return None
        
        queue = [self.root]
        key_node = None
        last_node = None
        parent = None

        while queue:
            last_node = queue.pop(0)
            if last_node.data == key:
                key_node = last_node

            if last_node.left:
                parent = last_node
                queue.append(last_node.left)
            if last_node.right:
                parent = last_node
                queue.append(last_node.right)

        if key_node:
            key_node.data = last_node.data
            if parent.right == last_node:
                parent.right = None
            else:
                parent.left = None

    def inorder(self, node):
        """Inorder Traversal (Left, Root, Right)"""
        if node:
            self.inorder(node.left)
            print(node.data, end=" ")
            self.inorder(node.right)

    def preorder(self, node):
        """Preorder Traversal (Root, Left, Right)"""
        if node:
            print(node.data, end=" ")
            self.preorder(node.left)
            self.preorder(node.right)

    def postorder(self, node):
        """Postorder Traversal (Left, Right, Root)"""
        if node:
            self.postorder(node.left)
            self.postorder(node.right)
            print(node.data, end=" ")

    def level_order(self):
        """Level Order Traversal"""
        if not self.root:
            return
        
        queue = [self.root]
        while queue:
            temp = queue.pop(0)
            print(temp.data, end=" ")
            if temp.left:
                queue.append(temp.left)
            if temp.right:
                queue.append(temp.right)
        print()

    def height(self, node):
        """Find Height of Tree"""
        if not node:
            return 0
        left_height = self.height(node.left)
        right_height = self.height(node.right)
        return max(left_height, right_height) + 1

    def count_nodes(self, node):
        """Count Total Nodes in Tree"""
        if not node:
            return 0
        return 1 + self.count_nodes(node.left) + self.count_nodes(node.right)

    def count_leaf_nodes(self, node):
        """Count Leaf Nodes (Nodes with no children)"""
        if not node:
            return 0
        if not node.left and not node.right:
            return 1
        return self.count_leaf_nodes(node.left) + self.count_leaf_nodes(node.right)

    def diameter(self, node):
        """Find Diameter of Tree (Longest Path Between Any Two Nodes)"""
        if not node:
            return 0
        
        left_height = self.height(node.left)
        right_height = self.height(node.right)

        left_diameter = self.diameter(node.left)
        right_diameter = self.diameter(node.right)

        return max(left_height + right_height + 1, max(left_diameter, right_diameter))

    def is_balanced(self, node):
        """Check if Tree is Balanced (Height difference between left & right <=1)"""
        if not node:
            return True
        
        left_height = self.height(node.left)
        right_height = self.height(node.right)

        if abs(left_height - right_height) > 1:
            return False
        
        return self.is_balanced(node.left) and self.is_balanced(node.right)

